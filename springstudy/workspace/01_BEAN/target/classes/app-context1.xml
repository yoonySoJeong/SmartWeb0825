<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		spring bean configuration file
		: 안녕 난 bean을 만드는 XML이야
	 -->
	 
	 <!--
	 	 1. 디폴트 생성자 + setter
	 	 setter injection 방식 : setter로 넣기
	  -->
	 <!-- 
	 	 기본적으로 singleTon으로 생성 된다.	==> 작업 하지 않아도 알아서 싱글톤으로 생성 된다
	 
	 	 1) 디폴트 생성자
	 	 <bean id="객체명" class="클래스명"></bean>
	 	 <bean id="객체명" class="클래스명" />			// 클래스명 작성한 뒤 ctrl space 하면 package명이 자동으로 들어감
	 	 2) setter
	 	 <property name="필드명">
	 	 	<value>값</value>
	 	 </property>
	 	 <property name="필드명">
	 	 	<ref bean="객체명" />    // 참조하는 객체명, 스스로 닫는 테그로 마무리
	 	 </property>
	  -->
	
	<!-- 
		지금부터
		Calculator calculator1 = new Calculator();
	 -->
	 <bean id="calculator1" class="com.koreait.ex01.bean01.Calculator">
	 </bean>
	<!-- 
		지금부터 아래 Bean을 생성한다.
		EngineerCalculator eCalculator1 = new EngineerCalculator();
		eCalculator1.setA(7);
		eCalculator1.setB(2);
		eCalculator1.setCalculator(calculator1);
	 -->	 
	<bean id="eCalculator1" class="com.koreait.ex01.bean01.EngineerCalculator">
		<property name="a">
			<value>7</value>		<!-- 숫자든 문자든 그냥 작성하면 됨 구분 없음 -->
		</property>
		<property name="b">
			<value>3</value>
		</property>
		<property name="calculator">
			<ref bean="calculator1" />
		</property>
	</bean>	 
	 
	 
	 <!-- 
	 	다음 Bean을 생성해 본다.
	 	Calculator calculator2 = new Calculator();
	 	EngineerCalculator eCalculator2 = new EngineerCalculator();
	 	eCalculator2.setA(12);
	 	ecalculator2.setB(7);
	 	eCalculator2.setCalculator(calculator2);
	  -->
	  
	 <!-- 이건 어제 배운 방법과 동일한 방법
	 <bean id="calculator2" class="com.koreait.ex01.bean01.Calculator" />
	 <bean id="eCalculator2" class="com.koreait.ex01.bean01.EngineerCalculator">
	 	<property name="a">
	 		<value>12</value>
	 	</property>
	 	<property name="b">
	 		<value>7</value>
	 	</property>
	 	<property name="calculator">	 calculator 이름으로 
			<ref bean="calculator2" />	 calculator2 객체를 저장한다 :: 객체 저장은 ref tag DO NOT FORGET!!!! 
	 	</property>
	 </bean>
	  --> 
	 
	 <!-- 이건 어제 배운 것과 다른 방법 tag내 속성에 직접 추가하는 방법으로 value, ref tag를 property 내부에 따로 작성하지 않아도 됨 -->
	 <bean id="calculator2" class="com.koreait.ex01.bean01.Calculator" />
	 <bean id="eCalculator2" class="com.koreait.ex01.bean01.EngineerCalculator">
	 	<property name="a" value="12" />
	 	<property name="b" value="7" />
 		<property name="calculator" ref="calculator2" />
	 </bean>
	 
	 <!-- ******************************************************************************************************************************* -->
	 
	 <!-- 
	 	 2. 필드 값을 받아오는 생성자
	 	 	: constructor injection 방식	- 인수의 순서가 아주아주 중요하다 : 왜냐하면 빈에 직접 실어주는 형태이므로
	  -->
	  <!-- 
	  		<bean class="클래스명" id="객체명">
	  			<constructor-arg>
	  				<value>1번째인수</value>
	  			<constructor-arg>
	  			<constructor-arg>
	  				<value>2번째인수</value>
	  			<constructor-arg>
	  			<constructor-arg>
	  				<ref bean="3번째인수(객체명)">
	  			<constructor-arg>
	  		<bean class="클래스명" id="객체명">
	   -->
	  <!-- 
	  		Calculator calculator3 = new Calculator();
	  		EngineerCalculator eCalculator3 = new EngineerCalculator(25, 12, calculator3);
	   -->
	 <bean class="com.koreait.ex01.bean01.Calculator" id="calculator3" />			<!-- bean(객체) 하나 생성 -->
	 <bean class="com.koreait.ex01.bean01.EngineerCalculator" id="eCalculator3">	<!-- bean(객체) 하나 생성 -->
	 	<constructor-arg>
	 		<value>25</value>
	 	</constructor-arg>
	 	<constructor-arg>
	 		<value>12</value>
	 	</constructor-arg>
	 	<constructor-arg>
	 		<ref bean="calculator3" />
	 	</constructor-arg>
	 </bean>
	 
	 <!-- 직접 실어주는 방법이다 -->
	 <bean class="com.koreait.ex01.bean01.Calculator" id="calculator4" />
	 <bean class="com.koreait.ex01.bean01.EngineerCalculator" id="eCalculator4">
	 	<constructor-arg value="100" />
	 	<constructor-arg value="25" />
	 	<constructor-arg ref="calculator4" />
	 </bean>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</beans>
