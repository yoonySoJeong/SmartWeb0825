/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.60
 * Generated at: 2022-01-14 01:36:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class changePw_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/SmartWeb0825/springstudy/nearby/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/NEARBY/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1638260032713L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>NearBy - 비밀번호 변경</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/image/titleImg3.png\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@10\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/fnLoginCheck.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/header.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/changePw.css\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(" @import url(//fonts.googleapis.com/earlyaccess/notosanskr.css);\r\n");
      out.write("\t.notosanskr * { font-family: 'Noto Sans KR', sans-serif; }\r\n");
      out.write("\t*{ margin: 0; padding: 0; box-sizing: border-box; font-family: 'Noto Sans KR', sans-serif; font-size: 14px; }\r\n");
      out.write("\r\n");
      out.write("\tfooter {\r\n");
      out.write("\t\tmargin-top : 200px;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("//이름/비밀번호/핸드폰/생일/성별 --> 이메일은X\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\tfnCheckSubmit();             // 모든 함수 확인 후 서브밋넘기기\r\n");
      out.write("\t\tfnCurrentPwCheck();\r\n");
      out.write("\t\tfnNewPwCheck(); // 새 비밀번호 정규식\r\n");
      out.write("\t\tfnPwDoubleCheck();\r\n");
      out.write("\t\tfnCurrentEmailCheck();\r\n");
      out.write("\t\tfnCheckLogin();\r\n");
      out.write("\t}); \r\n");
      out.write("\t\r\n");
      out.write("\t// 서브밋\r\n");
      out.write("\t function fnCheckSubmit(){\r\n");
      out.write("\t    $('#modify_btn').on('click', function(event){\r\n");
      out.write("\t      if( confirm('변경하시겠습니까?') == false){\r\n");
      out.write("\t\t\t\tevent.preventDefault(); \r\n");
      out.write("\t          return false;\r\n");
      out.write("\t\t\t} else if ( pw_result == false ) {\r\n");
      out.write("                event.preventDefault(); \r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '현재 비밀번호를 확인해주세요'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("                return false;  \r\n");
      out.write("            } else if ( new_pw_result == false ) {\r\n");
      out.write("                event.preventDefault();  \r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '새 비밀번호를 확인해주세요'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("                return false;  \r\n");
      out.write("            } else if ( pw_double_result == false ) {\r\n");
      out.write("                event.preventDefault(); \r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '새 비밀번호를 확인해주세요'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("                return false;  \r\n");
      out.write("            } else if ( email_result == false ) {\r\n");
      out.write("\t\t\t\tevent.preventDefault();\r\n");
      out.write("\t    \t\t  Swal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '이메일을 확인해주세요'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("                return false;  \r\n");
      out.write("            } else if ( authCodePass == false ) { \r\n");
      out.write("\t\t\t\tevent.preventDefault();\r\n");
      out.write("\t    \t\t  Swal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '이메일 인증을 진행해주세요'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("            \treturn false;\r\n");
      out.write("            } else{\r\n");
      out.write("            \treturn true;\r\n");
      out.write("            }\r\n");
      out.write("\t        });\r\n");
      out.write("\t    } //   function fnCheckSubmit()\r\n");
      out.write("\t    \r\n");
      out.write("\t\r\n");
      out.write("    // 아이디\r\n");
      out.write("\tlet regId = /^[a-zA-Z0-9_-]{4,}$/;\r\n");
      out.write("    // 비밀번호\r\n");
      out.write("\tlet regPwd = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$/;\r\n");
      out.write("    // 이름\r\n");
      out.write("\tlet regName = /^[a-zA-Z가-힣]{1,30}$/;\r\n");
      out.write("    // 이메일\r\n");
      out.write("\tlet regEmail = /^[0-9a-zA-Z-_]+@[a-zA-Z0-9]+([.][a-zA-Z]{2,}){1,2}/;\r\n");
      out.write("\r\n");
      out.write("\tlet pw_result = false;\r\n");
      out.write("\tlet new_pw_result = false;\r\n");
      out.write("\tlet pw_double_result = false;\r\n");
      out.write("\tlet email_result = false;\r\n");
      out.write("\tlet authCodePass = false;\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* -------------------------------------------------------------- fnNewPwCheck() ------------------------------------------------ */\r\n");
      out.write("      // 새 비밀번호 정규식 \r\n");
      out.write("      function fnNewPwCheck(){\r\n");
      out.write("         \r\n");
      out.write("         $('#newPw').on('blur keyup', function(){\r\n");
      out.write("            if( regPwd.test( $(\"#newPw\").val())){    \r\n");
      out.write("                $(\"#new_pw_check\").text(\"사용가능한 비밀번호입니다.\").addClass(\"pass_msg\").removeClass('error_msg');\r\n");
      out.write("                new_pw_result = true;\r\n");
      out.write("            } else if (    $('#newPw').val() == '' ){\r\n");
      out.write("                $(\"#new_pw_check\").text('입력은 필수입니다.').addClass('error_msg').removeClass('pass_msg');\r\n");
      out.write("                new_pw_result = false;\r\n");
      out.write("            }    else {\r\n");
      out.write("                $(\"#new_pw_check\").text(\"비밀번호는 8~20자의 영문 대/소문자, 숫자, 특수문자 등 3종류 이상으로 조합해주세요.\").addClass('error_msg').removeClass('pass_msg');\r\n");
      out.write("                new_pw_result = false;\r\n");
      out.write("            }\r\n");
      out.write("            return new_pw_result;\r\n");
      out.write("         }); \r\n");
      out.write("      \r\n");
      out.write("      } // fnPwCheck\r\n");
      out.write("      \r\n");
      out.write("/* -------------------------------------------------------------- fnPwDoubleCheck() ------------------------------------------------ */\r\n");
      out.write("   // 비밀번호 재확인 일치 \r\n");
      out.write("         function fnPwDoubleCheck(){\r\n");
      out.write("          \r\n");
      out.write("          $('#pwCheck').on('blur keyup', function(){     \r\n");
      out.write("                if($('#newPw').val() !=  $(\"#pwCheck\").val() ){\r\n");
      out.write("                    $(\"#pw_doubleCheck\").text( '비밀번호가 일치하지 않습니다.').addClass('error_msg').removeClass('pass_msg');\r\n");
      out.write("                    pw_double_result = false;\r\n");
      out.write("                } else{\r\n");
      out.write("                    $(\"#pw_doubleCheck\").text('').removeClass('error_msg').removeClass('pass_msg');\r\n");
      out.write("                    pw_double_result = true;\r\n");
      out.write("                }  \r\n");
      out.write("          return pw_double_result;\r\n");
      out.write("            });\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("/* -------------------------------------------------------------- fnSendAuthCode() ------------------------------------------------ */\r\n");
      out.write("         function fnSendAuthCode(){\r\n");
      out.write("         \t\r\n");
      out.write("         \t$('#authCode_btn').click(function(){\r\n");
      out.write("         \t\t$.ajax({\r\n");
      out.write("         \t\t\turl : '/nearby/member/sendAuthCode',\r\n");
      out.write("         \t\t\ttype: 'post',\r\n");
      out.write("         \t\t\tdata: 'email='+ $('#email').val(),\r\n");
      out.write("         \t\t\tdataType: 'json',\r\n");
      out.write("         \t\t\tsuccess : function(map) {\r\n");
      out.write("         \t\t\t\tconsole.log(map.authCode);\r\n");
      out.write("    \t\t\t\t\tSwal.fire({\r\n");
      out.write("    \t\t\t\t\t\ttext: '인증코드가 전송되었습니다.'\r\n");
      out.write("    \t\t\t\t\t})\r\n");
      out.write("         \t\t\t\tfnVerifyAuthcode(map.authCode); // 12/13추가\r\n");
      out.write("         \t\t\t},\r\n");
      out.write("         \t\t\terror: function() {\r\n");
      out.write("    \t\t\t\t\tSwal.fire({\r\n");
      out.write("    \t\t\t\t\t\ttext: '인증코드 전송 실패'\r\n");
      out.write("    \t\t\t\t\t})\r\n");
      out.write("     \t\t\t\t}\r\n");
      out.write("         \t\t});\t // ajax\r\n");
      out.write("         \t});\r\n");
      out.write("         \treturn;\r\n");
      out.write("         } \r\n");
      out.write("/* ------------------------------------------ fnVerifyAuthcode() ------------------------------------ */\r\n");
      out.write("      \t// 인증코드 검증 변수와 함수\r\n");
      out.write("      \tfunction fnVerifyAuthcode(authCode){\r\n");
      out.write("      \t\t$('#verify_btn').click(function(){\r\n");
      out.write("      \t\t\tif ( $('#authCode').val() == '' ) {\r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '인증번호를 입력하세요'\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("      \t\t\t\tauthCodePass = false;\r\n");
      out.write("      \t\t\t}else if ( $('#authCode').val() == authCode ) {\r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '인증되었습니다.'\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("      \t\t\t\tauthCodePass = true;\r\n");
      out.write("      \t\t\t} else {\r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '인증에 실패했습니다.'\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("      \t\t\t\tauthCodePass = false;\r\n");
      out.write("      \t\t\t}\r\n");
      out.write("      \t\t}); // end click\r\n");
      out.write("      \t}         \r\n");
      out.write(" /* ************************************************************************************ */\r\n");
      out.write("         \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("/* ------------------------------------------------------------- fnCurrentPwCheck() ------------------------------------------------- */\t\r\n");
      out.write("\t// 현재 비밀번호 확인 함수\r\n");
      out.write("\tfunction fnCurrentPwCheck() {  // checkPassword\r\n");
      out.write("\t    $('#password_check_btn').on('click',function(){ // TODO ajax로 select 결과 받아서 처리하기해야함.\r\n");
      out.write("\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : '/nearby/member/checkPassword',\r\n");
      out.write("\t\t\t\ttype : 'post',\r\n");
      out.write("\t\t\t\tdata : 'pw=' + $('#pw').val(),\r\n");
      out.write("\t\t\t\tdataType: 'json',               // 받아올 데이터 타입\r\n");
      out.write("\t\t\t\tsuccess : function(map){\r\n");
      out.write("\t\t\t\t\tlet name = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\t\t\t\t if( map.selectResult > 0){\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '비밀번호 확인완료',\r\n");
      out.write("\t\t\t\t\t\t\ttext: name + '님의 비밀번호가 확인되었습니다.',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\t pw_result = true;\r\n");
      out.write("\t\t             } else if(map.selectResult == 0) {\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'error',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '비밀번호 재확인필요',\r\n");
      out.write("\t\t\t\t\t\t\ttext: name + '님의 비밀번호가 일치하지 않습니다.',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\t pw_result = false;\r\n");
      out.write("\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t}, // End Seuccess function\r\n");
      out.write("\t\t\t\terror : function(xhr, ajaxOptions, thrownError) {\r\n");
      out.write("\t\t\t       console.log(xhr.responseText);\r\n");
      out.write("\t\t\t\t} // End Error function\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}) // End ajax\r\n");
      out.write("\t\t}); // click event\r\n");
      out.write("\t} // End fnCurrentPwCheck\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("/* ------------------------------------------------------------- fnCurrentEmailCheck() ------------------------------------------------- */\t\r\n");
      out.write("\t// 현재 이메일 확인 함수\r\n");
      out.write("\tfunction fnCurrentEmailCheck() {  // checkPassword\r\n");
      out.write("\t    $('#authCode_btn').on('click',function(){ \r\n");
      out.write("\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : '/nearby/member/selectByEmail',\r\n");
      out.write("\t\t\t\ttype : 'post',\r\n");
      out.write("\t\t\t\tdata : 'email=' + $('#email').val(),\r\n");
      out.write("\t\t\t\tdataType: 'json',               // 받아올 데이터 타입\r\n");
      out.write("\t\t\t\tsuccess : function(map){\r\n");
      out.write("\t\t\t\t\tlet name = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\t\t\t\t if( map.result != null){\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'success',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '이메일 확인완료',\r\n");
      out.write("\t\t\t\t\t\t\ttext: name + '님의 이메일로 인증번호가 발송되었습니다.',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\tfnSendAuthCode(map.result.id);\r\n");
      out.write("\t\t\t\t\t\t email_result = true;\r\n");
      out.write("\t\t             } else if(map.result == null) {\r\n");
      out.write("\t\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\t\ticon: 'error',\r\n");
      out.write("\t\t\t\t\t\t\ttitle: '이메일 재확인필요',\r\n");
      out.write("\t\t\t\t\t\t\ttext: name + '님의 이메일이 일치하지 않습니다.',\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\t email_result = false;\r\n");
      out.write("\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t}, // End Seuccess function\r\n");
      out.write("\t\t\t\terror : function(xhr, ajaxOptions, thrownError) {\r\n");
      out.write("\t\t\t       alert(xhr.responseText);\r\n");
      out.write("\t\t\t\t} // End Error function\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}) // End ajax\r\n");
      out.write("\t\t}); // click event\r\n");
      out.write("\t} // End fnCurrentPwCheck\r\n");
      out.write("/* ------------------------------------------------------------- fnSendAuthCode() ------------------------------------------------- */\t\r\n");
      out.write("    function fnSendAuthCode(id){\r\n");
      out.write("    \t\r\n");
      out.write("   /*  \t$('#authCode_btn').click(function(){ */\r\n");
      out.write("    \t\t$.ajax({\r\n");
      out.write("    \t\t\turl : '/nearby/member/sendAuthCode',\r\n");
      out.write("    \t\t\ttype: 'post',\r\n");
      out.write("    \t\t\tdata: 'email='+ $('#email').val(),\r\n");
      out.write("    \t\t\tdataType: 'json',\r\n");
      out.write("    \t\t\tsuccess : function(map) {\r\n");
      out.write("    \t\t\t\tfnVerifyAuthcode(map.authCode, id); // 12/13추가\r\n");
      out.write("    \t\t\t\tconsole.log(map.authCode);\r\n");
      out.write("    \t\t\t},\r\n");
      out.write("    \t\t\terror: function() {\r\n");
      out.write("\t\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\t\ttext: '인증코드 전송실패'\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("    \t\t});\t // ajax\r\n");
      out.write("/*     \t}); */\r\n");
      out.write("    \treturn;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("/* ------------------------------------------------------------- fnVerifyAuthcode() ------------------------------------------------- */\t\r\n");
      out.write("\r\n");
      out.write("   \t// 인증코드 검증 변수와 함수\r\n");
      out.write("   \tfunction fnVerifyAuthcode(authCode){\r\n");
      out.write("   \t\t$('#verify_btn').click(function(){\r\n");
      out.write("   \t\t\tif ( $('#authCode').val() == authCode ) {\r\n");
      out.write("\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\ttext: '인증되었습니다.'\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("   \t\t\t\tauthCodePass = true;\r\n");
      out.write("   \t\t\t} else if ( $('#authCode').val() == '' ) { // 12/14 추가\r\n");
      out.write("\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\ttext: '인증번호를 입력하세요'\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("   \t\t\t\tauthCodePass = false;\r\n");
      out.write("   \t\t\t} else {\r\n");
      out.write("\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\ttext: '인증에 실패했습니다.'\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("   \t\t\t\tauthCodePass = false;\r\n");
      out.write("   \t\t\t}\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t}); // end click\r\n");
      out.write("   \t}         \r\n");
      out.write("\t\r\n");
      out.write("\t/* ----------------------------------------- fnCheckLogin() --------------------------------  */\r\n");
      out.write(" \tfunction fnCheckLogin(){\r\n");
      out.write("\t\tlet loginInfo = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\tif (loginInfo == '') {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t Swal.fire({\r\n");
      out.write("\t\t\t\ttext: '세션이 만료되었습니다. 로그인 화면으로 이동합니다.',\r\n");
      out.write("\t\t        icon: 'warning',\r\n");
      out.write("\t\t        confirmButtonColor: '#D4D4D4',  // confirm\r\n");
      out.write("\t\t        cancelButtonColor: '#D4D4D4',   // cancel\r\n");
      out.write("\t\t        confirmButtonText: '메인으로',\r\n");
      out.write("\t\t     }).then((result) => {\r\n");
      out.write("\t\t\t\tif(result.isConfirmed) { // confirm이 false이면 return\r\n");
      out.write("\t\t\t\t\tlocation.href='/nearby/';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t     })\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\t \t\r\n");
      out.write("\t\r\n");
      out.write("</script>\t\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \t\t<header class=\"header\">\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/layout/header.jsp", out, true);
      out.write("\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"form_container\" style=\"margin-top: 160px;\">\r\n");
      out.write("        <div class=\"pw_change_box\">\r\n");
      out.write("    \r\n");
      out.write("            <form action=\"");
      out.print(request.getContextPath());
      out.write("/member/changePassword\" method=\"post\" id=\"pw_change_form\">\r\n");
      out.write("\r\n");
      out.write("                <!-- 비밀번호 -->\r\n");
      out.write("                <div class=\"input_box\">\r\n");
      out.write("                    <label for=\"pw\">현재 비밀번호</label>\r\n");
      out.write("                    <div id=\"current_pw_box\">\r\n");
      out.write("\t                    <span class=\"space\">\r\n");
      out.write("\t                  \t  <input type=\"password\" id=\"pw\" name=\"pw\">\r\n");
      out.write("\t                    </span>\r\n");
      out.write("\t                    <span>\r\n");
      out.write("\t\t                    <input type=\"button\" value=\"확인하기\" id=\"password_check_btn\" class=\"pointer\">\r\n");
      out.write("\t                    </span>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"input_box\">\r\n");
      out.write("                    <label for=\"newPw\">새 비밀번호</label>\r\n");
      out.write("                    <span class=\"space\">\r\n");
      out.write("                  \t  <input type=\"password\" id=\"newPw\" name=\"newPw\">\r\n");
      out.write("                    </span>\r\n");
      out.write("                    <p id=\"new_pw_check\" class=\"msg_box\"></p>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- 비밀번호 확인 -->\r\n");
      out.write("                <div class=\"input_box\">\r\n");
      out.write("                    <label for=\"pwCheck\">새 비밀번호 확인</label>\r\n");
      out.write("                    <span class=\"space\">\r\n");
      out.write("\t                    <input type=\"password\" id=\"pwCheck\" >\r\n");
      out.write("                    </span>\r\n");
      out.write("                    <p id=\"pw_doubleCheck\" class=\"msg_box\"></p>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- 이메일 -->\r\n");
      out.write("                <div class=\"email_box\">\r\n");
      out.write("\r\n");
      out.write("                    <!-- 이메일 -->\r\n");
      out.write("                    <label for=\"email\">이메일</label>\r\n");
      out.write("                    <span class=\"space\">\r\n");
      out.write("\t                    <input type=\"text\" id=\"email\" name=\"email\">\r\n");
      out.write("                    </span>\r\n");
      out.write("\r\n");
      out.write("                    <!-- 인증코드 발송 -->\r\n");
      out.write("                    <span class=\"space\">\r\n");
      out.write("\t                    <input type=\"button\" value=\"인증번호받기\" id=\"authCode_btn\" class=\"pointer\">\r\n");
      out.write("                    </span>\r\n");
      out.write("                    <span id=\"email_check\"></span>\r\n");
      out.write("\r\n");
      out.write("                    <!-- 인증코드 입력 칸 -->\r\n");
      out.write("                    <span class=\"space\">\r\n");
      out.write("\t                    <input type=\"text\" name=\"authCode\" id=\"authCode\">\r\n");
      out.write("                    </span>\r\n");
      out.write("                    <input type=\"button\" value=\"인증하기\" id=\"verify_btn\" class=\"pointer\">\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("               <div class=\"btn_wrap\">\r\n");
      out.write("                   <button id=\"modify_btn\" class=\"btn btn-primary pointer\">수정완료</button>             \r\n");
      out.write("               </div>                    \r\n");
      out.write("            </form>\r\n");
      out.write("            \r\n");
      out.write("        </div>\r\n");
      out.write("   \r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\t  <footer>\r\n");
      out.write("           ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/layout/footer.jsp", out, true);
      out.write("\r\n");
      out.write("      </footer>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
