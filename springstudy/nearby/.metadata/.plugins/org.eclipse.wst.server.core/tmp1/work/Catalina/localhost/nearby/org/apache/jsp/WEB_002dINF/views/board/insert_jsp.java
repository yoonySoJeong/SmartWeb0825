/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.60
 * Generated at: 2022-01-14 01:36:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/SmartWeb0825/springstudy/nearby/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/NEARBY/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1638260032713L));
    _jspx_dependants.put("jar:file:/C:/SmartWeb0825/springstudy/nearby/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/NEARBY/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>NearBy</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/image/titleImg3.png\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/header.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/board/boardInsert.css\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=4lnq99nnpg&submodules=geocoder\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@10\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  $(document).ready(function(){\r\n");
      out.write("\t\tfnFileCheck();\r\n");
      out.write("\t\tfnSubmitCheck();\r\n");
      out.write("\t\tfnTextLimit(); // content 2000자 막기\r\n");
      out.write("\t\t// file 클릭시 map 안보이게 처리\r\n");
      out.write("\t\t$(\"#file\").click(function(){\r\n");
      out.write("\t\t\t$(\"#map\").css('display', 'none');\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// textarea 크기 보이게 함 \r\n");
      out.write("\t\tvar txtArea = $(\".content_height\");\r\n");
      out.write("\t    if (txtArea) {\r\n");
      out.write("\t        txtArea.each(function(){\r\n");
      out.write("\t            $(this).height(this.scrollHeight);\r\n");
      out.write("\t        });\r\n");
      out.write("\t    }\r\n");
      out.write("\t    // 글 삽입 날짜\r\n");
      out.write("\t    let today = new Date();\r\n");
      out.write("\t    let year = today.getFullYear();\r\n");
      out.write("\t    let month = today.getMonth() + 1;\r\n");
      out.write("\t    let day = today.getDate();\r\n");
      out.write("\t    let hour = today.getHours();\r\n");
      out.write("\t    let minute = today.getMinutes();\r\n");
      out.write("\t    let amPm = '';\r\n");
      out.write("\t    if( hour < 12) { amPm = '오전'; }\r\n");
      out.write("\t    if( 12<= hour <24 ) { amPm = '오후'; }\r\n");
      out.write("\t    if (hour   < 10) {hour   = \"0\"+hour;}\r\n");
      out.write("\t    if (minute < 10) {minute = \"0\"+minute;}\r\n");
      out.write("\t    \r\n");
      out.write("\t    $('#today').text(month +\"월 \"+ day+\"일 \"+ amPm +\" \"+ hour+\":\"+minute);\r\n");
      out.write("\t    \r\n");
      out.write("\t    fnCheckLogin();\r\n");
      out.write("\t}); // document \r\n");
      out.write("    \r\n");
      out.write("  \r\n");
      out.write("   function fnTextLimit(){\r\n");
      out.write("\t      $('#content').on('keyup', function(event){\r\n");
      out.write("\t      //console.log(  $('#content').val());\r\n");
      out.write("\t      \r\n");
      out.write("\t         if( $('#content').val().length > 2000) {\r\n");
      out.write("\t         //alert(\"글자수는 2000자까지입니다.\");\r\n");
      out.write("\t         Swal.fire({\r\n");
      out.write("\t               text: '글자수는 2000자까지입니다.',\r\n");
      out.write("\t            })\r\n");
      out.write("\t         $('#content').val( $('#content').val().substring(0,2000) );\r\n");
      out.write("\t         return;\r\n");
      out.write("\t         }\r\n");
      out.write("\t      });\r\n");
      out.write("\t   }\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("// submit 막기\r\n");
      out.write("   function fnSubmitCheck(){\r\n");
      out.write("       $('#insertBtn').click(function(event){\r\n");
      out.write("          \r\n");
      out.write("          // 위치 파일 내용 빈값일때\r\n");
      out.write("          if( $('.location').val() == ''  && $('#content').val() == '' && $('#modify_file').val() == '' )  {\r\n");
      out.write("             Swal.fire({\r\n");
      out.write("                text: '당신의 일상을 적어주세요.'\r\n");
      out.write("             })\r\n");
      out.write("               event.preventDefault();\r\n");
      out.write("          \r\n");
      out.write("          // 위치는 빈값 이고 내용이나 파일은 있을 때\r\n");
      out.write("          } else if (  $('.location').val() == ''  &&  ( $('#content').val() != '' || $('#modify_file').val() != '' ) )  {\r\n");
      out.write("           if(confirm('주변 사람들에게 위치를 알려주세요! ') ){\r\n");
      out.write("               event.preventDefault();\r\n");
      out.write("                map();\r\n");
      out.write("                $(\"#map\").css('display', 'block');\r\n");
      out.write("           }\r\n");
      out.write("        \r\n");
      out.write("        // 위치는 빈값이 아니나 파일이랑 내용이 빈값일 때 \r\n");
      out.write("          } else if ( $('.location').val() != ''  &&   $('#content').val() == '' && $('#modify_file').val() == '' )  {\r\n");
      out.write("           //  alert(\"사진이나 일상을 입력해주세요.\");\r\n");
      out.write("             Swal.fire({\r\n");
      out.write("                text: '사진이나 일상을 적어주세요.'\r\n");
      out.write("                \r\n");
      out.write("             })\r\n");
      out.write("             event.preventDefault();\r\n");
      out.write("           }  \r\n");
      out.write("        })\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("\t// 이미지 및 비디오 확장자 및 크기  체크\r\n");
      out.write("\tfunction fnFileCheck(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#modify_file\").on('change',function(){\r\n");
      out.write("\t\t\tlet origin = $(this).val();      // 첨부된 파일명\r\n");
      out.write("\t\t\tlet extName = origin.substring(origin.lastIndexOf(\".\")+1 ).toUpperCase();     // 확장자 대문자로 저장 \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 확장자 정보\r\n");
      out.write("\t\t\tif( $.inArray(extName, [\"JPG\", \"PNG\", \"JPEG\", \"GIF\",\"MP4\", \"MPEG\", \"AVI\", \"MOV\", \"M4V\", \"JFIF\"])  == -1 )  {  // 첨부된 파일이 [\"JPG\", \"PNG\", \"JPEC\", \"GIF\"] 중 하나가 아니면\r\n");
      out.write("\t\t\t// \talert('업로드 할 수 없는 확장자입니다.');\r\n");
      out.write("\t\t\t \tSwal.fire({\r\n");
      out.write("\t\t\t\t\ttext:'업로드 할 수 없는 확장자입니다.'\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t$(this).val('');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 파일크기점검\r\n");
      out.write("\t\t\tlet maxSize = 1024 * 1024 * 1000;   \t\t   // 최대크기 10MB\r\n");
      out.write("\t\t\tlet fileSize = $(this)[0].files[0].size;       // 첨부된 파일 크기\r\n");
      out.write("\t\t\tif ( fileSize > maxSize ){\r\n");
      out.write("\t\t\t//\talert('1GB 이하의 파일만 업로드가 가능합니다.');\r\n");
      out.write("\t\t\t\tSwal.fire({\r\n");
      out.write("\t\t\t\t\ttext:'1GB 이하의 파일만 업로드가 가능합니다.'\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("\t\t\t\t$(this).val('');\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// file 클릭하고 변경시 이미지 및 비디오 변경가능하게 하는 함수\r\n");
      out.write("\tfunction readURL(input) {\r\n");
      out.write("\t\tif (input.files && input.files[0]) {\r\n");
      out.write("\t\t\tlet image = [\"JPG\", \"PNG\", \"JPEG\", \"GIF\",\"JFIF\"];\r\n");
      out.write("\t\t\tlet video = [\"MP4\", \"MPEG\", \"AVI\", \"MOV\", \"M4V\"];\r\n");
      out.write("\t\t\tvar reader = new FileReader();\r\n");
      out.write("\t\t\treader.onload = function(e) {\r\n");
      out.write("\t\t\t\tif(  image.includes(input.files[0].name.split('.').pop().toUpperCase() )){\r\n");
      out.write("\t\t\t\tdocument.getElementById('previewImg').src = e.target.result;\r\n");
      out.write("\t\t\t\t$(\"#previewImg\").css('display', 'block');\r\n");
      out.write("\t\t\t\t$(\"#previewVideo\").css('display', 'none');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t else if (    video.includes(input.files[0].name.split('.').pop().toUpperCase() )        )  {\r\n");
      out.write("\t\t\t\t\t document.getElementById('previewVideo').src = e.target.result;\r\n");
      out.write("\t\t\t\t\t\t$(\"#previewVideo\").css('display', 'block');\r\n");
      out.write("\t\t\t\t\t\t$(\"#previewImg\").css('display', 'none');\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\treader.readAsDataURL(input.files[0]);\r\n");
      out.write("\t\t\t// console.log(input.files[0].name.split('.').pop().toLowerCase());\r\n");
      out.write("\t\t\t$('#modify_file').css('display', 'block');\r\n");
      out.write("\t\t\t$(\"#previewImg\").css('display', 'block');\r\n");
      out.write("\t\t\t$('#img_wrap').css('padding', '0');\r\n");
      out.write("\t\t\t$('#file_label').css('display', 'none');\r\n");
      out.write("\t\t\t$('#upload').css('display', 'none');\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tdocument.getElementById('preview').src = \"\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("   // 맵 메인 함수\r\n");
      out.write("\tfunction map() {\r\n");
      out.write("\t\t$(\"#map\").css('display', 'block');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar map = new naver.maps.Map(\"map\", {\r\n");
      out.write("\t\t\t  center: new naver.maps.LatLng(37.55415109162072, 126.93582461156707),\r\n");
      out.write("\t\t\t  zoom: 15,\r\n");
      out.write("\t\t\t  mapTypeControl: true\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t map.setOptions({ //모든 지도 컨트롤 숨기기(확대 축소 일반지도 위성지도)\r\n");
      out.write("\t            scaleControl: false,\r\n");
      out.write("\t            logoControl: false,\r\n");
      out.write("\t            mapDataControl: false,\r\n");
      out.write("\t            zoomControl: false,\r\n");
      out.write("\t            mapTypeControl: false\r\n");
      out.write("\t        });\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tvar infoWindow = new naver.maps.InfoWindow({\r\n");
      out.write("\t\t\t    anchorSkew: true,\r\n");
      out.write("\t\t\t    backgroundColor: \"none\",\r\n");
      out.write("\t\t\t    Color: \"pink\",\r\n");
      out.write("\t\t\t    borderColor: \"none\",\r\n");
      out.write("\t\t\t    borderWidth: \"none\",\r\n");
      out.write("\t\t\t    anchorSize: new naver.maps.Size(0, 0),\r\n");
      out.write("\t\t\t    display:  \"none\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\t\tvar marker = new naver.maps.Marker({\r\n");
      out.write("\t\t\t    position: new naver.maps.LatLng(37.55415109162072, 126.93582461156707),\r\n");
      out.write("\t\t\t    map: map\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tnaver.maps.Event.addListener(map, 'click', function(e) {\r\n");
      out.write("\t\t\t    marker.setPosition(e.coord);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmap.setCursor('marker');\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t // 클릭 포인트 함수(위도경도)\r\n");
      out.write("\tfunction searchCoordinateToAddress(latlng) {\r\n");
      out.write("\r\n");
      out.write("\t\t  infoWindow.close();\r\n");
      out.write("\r\n");
      out.write("\t\t  naver.maps.Service.reverseGeocode({\r\n");
      out.write("\t\t    coords: latlng,\r\n");
      out.write("\t\t    orders: [\r\n");
      out.write("\t\t      naver.maps.Service.OrderType.ADDR,\r\n");
      out.write("\t\t      naver.maps.Service.OrderType.ROAD_ADDR\r\n");
      out.write("\t\t    ].join(',')\r\n");
      out.write("\t\t  }, function(status, response) {\r\n");
      out.write("\t\t    if (status === naver.maps.Service.Status.ERROR) {\r\n");
      out.write("\t\t      if (!latlng) {\r\n");
      out.write("\t\t        return alert('다시 입력해주세요');\r\n");
      out.write("\t\t      }\r\n");
      out.write("\t\t      if (latlng.toString) {\r\n");
      out.write("\t\t        return  alert('다시 입력해주세요');\r\n");
      out.write("\t\t      }\r\n");
      out.write("\t\t      if (latlng.x && latlng.y) {\r\n");
      out.write("\t\t        return  alert('다시 입력해주세요'); \r\n");
      out.write("\t\t      }\r\n");
      out.write("\t\t      return  alert('다시 입력해주세요'); \r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    var address = response.v2.address,\r\n");
      out.write("\t\t        htmlAddresses = [];\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t\t// null 값은 빈문자 처리함 \r\n");
      out.write("\t\t    document.insertBoard_Form.location.value = address.jibunAddress;\r\n");
      out.write("\t\t    var sub = address.jibunAddress.split(' ');\r\n");
      out.write("\t\t    var nearbyAddress = sub[0]+\" \"+sub[1]+\" \"+sub[2];\r\n");
      out.write("\t\t    for(var i=0; i<3; i++){\r\n");
      out.write("\t\t    //\tconsole.log(sub[i]);\r\n");
      out.write("\t\t    \tvar addressSum = \"\";\r\n");
      out.write("\t\t    \t\r\n");
      out.write("\t\t    \tif( typeof sub[i] == \"undefined\" || sub[i] == null || sub[i] == \"\"  ){\r\n");
      out.write("\t\t    \t\t//console.log(\"널 : \" + i);\r\n");
      out.write("\t\t    \t\tsub[i] = \" \";\r\n");
      out.write("\t\t    \t\taddressSum += sub[i];\r\n");
      out.write("\t\t            document.insertBoard_Form.location.value = addressSum;\r\n");
      out.write("\t\t    \t}  else {\r\n");
      out.write("\t\t    \t\taddressSum += sub[i];\r\n");
      out.write("\t\t    \t\tdocument.insertBoard_Form.location.value =  nearbyAddress;\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    document.insertBoard_Form.addr_remove.value ='';\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    if (address.jibunAddress !== '') {\r\n");
      out.write("\t\t        htmlAddresses.push(address.jibunAddress);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    infoWindow.setContent([\r\n");
      out.write("\t\t      '<div style=\"padding:10px;min-width:100px;line-height:100%;font-size:10px; display:none\">',\r\n");
      out.write("\t\t      htmlAddresses.join('<br />'),\r\n");
      out.write("\t\t      '</div>'\r\n");
      out.write("\t\t    ].join('\\n'));\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    $('#address').val(htmlAddresses);\r\n");
      out.write("\t\t    \r\n");
      out.write("\r\n");
      out.write("\t\t    infoWindow.open(map, latlng);\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t\t}\r\n");
      out.write("\t \r\n");
      out.write("\t //검색했을 때(주소)\r\n");
      out.write("\tfunction searchAddressToCoordinate(address) {\r\n");
      out.write("\t\t  naver.maps.Service.geocode({\r\n");
      out.write("\t\t    query: address\r\n");
      out.write("\t\t  }, function(status, response) {\r\n");
      out.write("\t\t    if (status === naver.maps.Service.Status.ERROR) {\r\n");
      out.write("\t\t      if (!address) {\r\n");
      out.write("\t\t        return alert('죄송합니다. 다시 입력해주세요');\r\n");
      out.write("\t\t      }\r\n");
      out.write("\t\t      return  alert('죄송합니다. 다시 입력해주세요');\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    if (response.v2.meta.totalCount === 0) {\r\n");
      out.write("\t\t      return  alert('죄송합니다. 다시 입력해주세요');\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    \r\n");
      out.write("\r\n");
      out.write("\t\t    var htmlAddresses = [],\r\n");
      out.write("\t\t      item = response.v2.addresses[0],\r\n");
      out.write("\t\t      point = new naver.maps.Point(item.x, item.y);\r\n");
      out.write("\t\t    document.insertBoard_Form.location.value = item.jibunAddress;\r\n");
      out.write("\t\r\n");
      out.write("\t\t    var sub = item.jibunAddress.split(' ');\r\n");
      out.write("\t\t    var nearbyAddress = sub[0]+\" \"+sub[1]+\" \"+sub[2];\r\n");
      out.write("\t\t    for(var i=0; i<3; i++){\r\n");
      out.write("\t\t    //\tconsole.log(sub[i]);\r\n");
      out.write("\t\t    \tvar addressSum = \"\";\r\n");
      out.write("\t\t    \t// undefined가 나오는 부분은 \"\"로 처리함\r\n");
      out.write("\t\t    \tif( typeof sub[i] == \"undefined\" || sub[i] == null || sub[i] == \"\"  ){\r\n");
      out.write("\t\t    \t//\tconsole.log(\"널 : \" + i);\r\n");
      out.write("\t\t    \t\tsub[i] = \" \";\r\n");
      out.write("\t\t    \t\taddressSum += sub[i];\r\n");
      out.write("\t\t            document.insertBoard_Form.location.value = addressSum;\r\n");
      out.write("\t\t    \t}  else {\r\n");
      out.write("\t\t    \t\tdocument.insertBoard_Form.location.value =  nearbyAddress;\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    document.insertBoard_Form.addr_remove.value ='';\r\n");
      out.write("\t\t    \r\n");
      out.write("         // 주소 검색 할 때 item.x   item.y\r\n");
      out.write("\t\t    if (item.jibunAddress) {\r\n");
      out.write("\t      \t\thtmlAddresses.push( item.jibunAddress);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    infoWindow.setContent([\r\n");
      out.write("\t\t      '<div style=\"padding:10px;min-width:50px;line-height:100%;font-size:10px;  display:none;\">',\r\n");
      out.write("\t\t      htmlAddresses.join('<br />'),\r\n");
      out.write("\t\t      '</div>'\r\n");
      out.write("\t\t    ].join('\\n'));\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t    map.setCenter(point);\r\n");
      out.write("\t\t    infoWindow.open(map, point);\r\n");
      out.write("\t\t  });\r\n");
      out.write("\t\t}\r\n");
      out.write("\t// 맵의 초기화 (초기화는 학원주소로 설정(노고산동))\r\n");
      out.write("\tfunction initGeocoder() {\r\n");
      out.write("\t\t  if (!map.isStyleMapReady) {\r\n");
      out.write("\t\t    return;\r\n");
      out.write("\t\t  }\r\n");
      out.write("\r\n");
      out.write("\t\t  map.addListener('click', function(e) {\r\n");
      out.write("\t\t    searchCoordinateToAddress(e.coord);\r\n");
      out.write("\t\t   // alert(e.coord.lat() + ', ' + e.coord.lng());  // 클릭하면 위도경도\r\n");
      out.write("\t\t  });\r\n");
      out.write("\r\n");
      out.write("\t\t  $('#address').on('keydown', function(e) {\r\n");
      out.write("\t\t    var keyCode = e.which;\r\n");
      out.write("\r\n");
      out.write("\t\t    if (keyCode === 13) { // Enter Key\r\n");
      out.write("\t\t      searchAddressToCoordinate($('#address').val());\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  });\r\n");
      out.write("\r\n");
      out.write("\t\t  $('#submit').on('click', function(e) {\r\n");
      out.write("\t\t    e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t    searchAddressToCoordinate($('#address').val());\r\n");
      out.write("\t\t  \r\n");
      out.write("\t\t  });\r\n");
      out.write("\r\n");
      out.write("\t\t  searchAddressToCoordinate('노고산동 106-1');\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tnaver.maps.onJSContentLoaded = initGeocoder;\r\n");
      out.write("\t\tnaver.maps.Event.once(map, 'init_stylemap', initGeocoder);\r\n");
      out.write("\t}\r\n");
      out.write("   \r\n");
      out.write("\t/* ----------------------------------------- fnCheckLogin() --------------------------------  */\r\n");
      out.write(" \tfunction fnCheckLogin(){\r\n");
      out.write("\t\tlet loginInfo = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\tif (loginInfo == '') {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t Swal.fire({\r\n");
      out.write("\t\t\t\ttext: '세션이 만료되었습니다. 로그인 화면으로 이동하시겠습니까?',\r\n");
      out.write("\t\t        icon: 'warning',\r\n");
      out.write("\t\t        showCancelButton: true,\r\n");
      out.write("\t\t        confirmButtonColor: '#D4D4D4',  // confirm\r\n");
      out.write("\t\t        cancelButtonColor: '#D4D4D4',   // cancel\r\n");
      out.write("\t\t        confirmButtonText: '이동',\r\n");
      out.write("\t\t        cancelButtonText: '취소'\t\r\n");
      out.write("\t\t     }).then((result) => {\r\n");
      out.write("\t\t\t\tif(result.isConfirmed) { // confirm이 false이면 return\r\n");
      out.write("\t\t\t\t\tlocation.href='");
      out.print(request.getContextPath());
      out.write("/';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t     })\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\t \t \t   \r\n");
      out.write("\t   \r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<header class=\"header\">\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/layout/header.jsp", out, true);
      out.write("\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"insert_wrap\">\r\n");
      out.write("\t<form id=\"insertBoard_Form\" action=\"/board/insertBoard\" method=\"post\" enctype=\"multipart/form-data\" name=\"insertBoard_Form\">\r\n");
      out.write("\t\t<div class=\"profileImg\"  id=\"p_img\">\r\n");
      out.write("\t\t\t");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\t<div class=\"id_wrap\">\r\n");
      out.write("    \t   <span id=\"board_writer\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("    \t   \t<div class=\"date\">\r\n");
      out.write("\t    \t    <span id=\"today\"></span>\r\n");
      out.write("\t    \t    <i class=\"fas fa-globe-asia\" ></i>\r\n");
      out.write("\t        </div>\r\n");
      out.write("\t\t </div>\r\n");
      out.write("\t\t <input type=\"hidden\" name=\"id\" class=\"id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" >\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t     <div class=\"myMap\">\r\n");
      out.write("\t\t     <span onclick=\"map()\" id=\"my_location\">내 위치   <i class=\"fas fa-map-marker-alt\" onclick=\"map()\"></i>\r\n");
      out.write("\t\t     \t<input type=\"text\" name=\"location\" class=\"location\" value=\"\"  readonly=\"readonly\"  >\r\n");
      out.write("\t\t     </span>\r\n");
      out.write("\t     </div>\r\n");
      out.write("\t     \r\n");
      out.write("\t     <div id=\"map_wrap\"></div>\r\n");
      out.write("\t    \r\n");
      out.write("\t<div id=\"map\" style=\"width:500px; height:200px;\">\r\n");
      out.write("        <div class=\"search\" style=\"\">\r\n");
      out.write("            <input id=\"address\" type=\"text\" name=\"addr_remove\" placeholder=\"주소를 입력해주세요(ex. 서울특별시, 마포구, 노고산동)\" />\r\n");
      out.write("            <input id=\"submit\" type=\"button\" value=\"주소 검색\" />\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>  \r\n");
      out.write("\t    \r\n");
      out.write("\t    <input type=\"file\" name=\"file\" id=\"modify_file\" style=\"display:none;\" onchange=\"readURL(this);\">\r\n");
      out.write("\t\t<div id=\"img_wrap\" >\r\n");
      out.write("\t\t\t  <label for=\"modify_file\" id=\"file_label\" class=\"file_label\" style=\"font-size:20px;\"> \r\n");
      out.write("\t\t\t  <i class=\"fas fa-photo-video\" id=\"upload\" ></i>\r\n");
      out.write("\t\t\t       사진 / 동영상을 올려주세요   </label>\r\n");
      out.write("\t\t\t      <div class=\"preview\">\r\n");
      out.write("\t\t\t           <img id=\"previewImg\" width=\"320px\" />\r\n");
      out.write(" \t\t\t\t       <video id=\"previewVideo\" controls></video>\r\n");
      out.write(" \t\t\t\t   </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"content_wrap\">\r\n");
      out.write("\t\t\t<textarea name=\"content\" id=\"content\" class=\"content_height\"  placeholder=\"당신의 일상을 공유해주세요\"></textarea>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<button id=\"insertBtn\">게시</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("\t<footer id=\"footer_wrap\"></footer>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/board/insert.jsp(391,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty loginUser.profile.pSaved}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t<img id=\"user_img\" src=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/resources/image/profile_default.png\"  class=\"pointer defaultImg\">\r\n");
          out.write("\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/views/board/insert.jsp(394,3) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty loginUser.profile.pSaved}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t    \t\t<img id=\"user_img\" src=\"/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.profile.pPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('/');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.profile.pSaved}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"  class=\"pointer\">\r\n");
          out.write("\t    \t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }
}
